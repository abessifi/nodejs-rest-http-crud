kind: "BuildConfig"
apiVersion: "v1"
metadata:
  name: "nodejs-pipeline"
spec:
  strategy:
    jenkinsPipelineStrategy:
      type: JenkinsPipeline
      jenkinsfile: |-
        def templatePath = 'nodejs-rest-http-crud'
        def templateName = 'nodejs-rest-http-crud'
        pipeline {
            agent {
              node {
                label 'nodejs'
              }
            }
            options {
                // set a timeout of 20 minutes for this pipeline
                timeout(time: 20, unit: 'MINUTES')
            }

            stages {
                stage('cleanup') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    openshift.selector("all", [ template : templateName ]).delete()
                                    if (openshift.selector("secrets", templateName).exists()) {
                                        openshift.selector("secrets", templateName).delete()
                                    }
                                }
                            }
                        }
                    }
                }
                stage('create') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    openshift.newApp(templatePath)
                                }
                            }
                        }
                    }
                }
                stage('build') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    def builds = openshift.selector("bc", templateName).related('builds')
                                    builds.untilEach(1) {
                                        return (it.object().status.phase == "Complete")
                                    }
                                }
                            }
                        }
                    }
                }
                stage('deploy') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    def rm = openshift.selector("dc", templateName).rollout()
                                    openshift.selector("dc", templateName).related('pods').untilEach(1) {
                                        return (it.object().status.phase == "Running")
                                    }
                                }
                            }
                        }
                    }
                }
                stage('tag') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    openshift.tag("${templateName}:latest", "${templateName}-staging:latest")
                                }
                            }
                        }
                    }
                }
            }
        }
